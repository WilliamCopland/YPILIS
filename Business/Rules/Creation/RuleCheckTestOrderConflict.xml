<?xml version="1.0" encoding="utf-8"?><RuleSet Description="{p1:Null}" Name="{p1:Null}" ChainingBehavior="Full" xmlns:p1="http://schemas.microsoft.com/winfx/2006/xaml" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/workflow">
	<RuleSet.Rules>
		<Rule ReevaluationBehavior="Always" Priority="1000" Description="{p1:Null}" Active="True" Name="AliquotExists">
			<Rule.ThenActions>
				<RuleStatementAction>
					<RuleStatementAction.CodeDomStatement>
						<ns0:CodeExpressionStatement LinePragma="{p1:Null}" xmlns:ns0="clr-namespace:System.CodeDom;Assembly=System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
							<ns0:CodeExpressionStatement.Expression>
								<ns0:CodeMethodInvokeExpression>
									<ns0:CodeMethodInvokeExpression.Method>
										<ns0:CodeMethodReferenceExpression MethodName="AliquotHasType">
											<ns0:CodeMethodReferenceExpression.TargetObject>
												<ns0:CodeThisReferenceExpression />
											</ns0:CodeMethodReferenceExpression.TargetObject>
										</ns0:CodeMethodReferenceExpression>
									</ns0:CodeMethodInvokeExpression.Method>
								</ns0:CodeMethodInvokeExpression>
							</ns0:CodeExpressionStatement.Expression>
						</ns0:CodeExpressionStatement>
					</RuleStatementAction.CodeDomStatement>
				</RuleStatementAction>
			</Rule.ThenActions>
			<Rule.Condition>
				<RuleExpressionCondition Name="{p1:Null}">
					<RuleExpressionCondition.Expression>
						<ns0:CodeBinaryOperatorExpression Operator="ValueEquality" xmlns:ns0="clr-namespace:System.CodeDom;Assembly=System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
							<ns0:CodeBinaryOperatorExpression.Right>
								<ns0:CodePrimitiveExpression>
									<ns0:CodePrimitiveExpression.Value>
										<ns1:Boolean xmlns:ns1="clr-namespace:System;Assembly=mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">false</ns1:Boolean>
									</ns0:CodePrimitiveExpression.Value>
								</ns0:CodePrimitiveExpression>
							</ns0:CodeBinaryOperatorExpression.Right>
							<ns0:CodeBinaryOperatorExpression.Left>
								<ns0:CodeBinaryOperatorExpression Operator="ValueEquality">
									<ns0:CodeBinaryOperatorExpression.Right>
										<ns0:CodePrimitiveExpression />
									</ns0:CodeBinaryOperatorExpression.Right>
									<ns0:CodeBinaryOperatorExpression.Left>
										<ns0:CodePropertyReferenceExpression PropertyName="AliquotOrder">
											<ns0:CodePropertyReferenceExpression.TargetObject>
												<ns0:CodeThisReferenceExpression />
											</ns0:CodePropertyReferenceExpression.TargetObject>
										</ns0:CodePropertyReferenceExpression>
									</ns0:CodeBinaryOperatorExpression.Left>
								</ns0:CodeBinaryOperatorExpression>
							</ns0:CodeBinaryOperatorExpression.Left>
						</ns0:CodeBinaryOperatorExpression>
					</RuleExpressionCondition.Expression>
				</RuleExpressionCondition>
			</Rule.Condition>
		</Rule>
		<Rule ReevaluationBehavior="Always" Priority="900" Description="{p1:Null}" Active="True" Name="NewTestsconflictWithEachOther">
			<Rule.ThenActions>
				<RuleStatementAction>
					<RuleStatementAction.CodeDomStatement>
						<ns0:CodeExpressionStatement LinePragma="{p1:Null}" xmlns:ns0="clr-namespace:System.CodeDom;Assembly=System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
							<ns0:CodeExpressionStatement.Expression>
								<ns0:CodeMethodInvokeExpression>
									<ns0:CodeMethodInvokeExpression.Parameters>
										<ns0:CodeBinaryOperatorExpression Operator="Add">
											<ns0:CodeBinaryOperatorExpression.Right>
												<ns0:CodeFieldReferenceExpression FieldName="m_AliquotTypeFromOtherTest">
													<ns0:CodeFieldReferenceExpression.TargetObject>
														<ns0:CodeThisReferenceExpression />
													</ns0:CodeFieldReferenceExpression.TargetObject>
												</ns0:CodeFieldReferenceExpression>
											</ns0:CodeBinaryOperatorExpression.Right>
											<ns0:CodeBinaryOperatorExpression.Left>
												<ns0:CodeBinaryOperatorExpression Operator="Add">
													<ns0:CodeBinaryOperatorExpression.Right>
														<ns0:CodePrimitiveExpression>
															<ns0:CodePrimitiveExpression.Value>
																<ns1:String xmlns:ns1="clr-namespace:System;Assembly=mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"> conflicts with another test ordered  for a </ns1:String>
															</ns0:CodePrimitiveExpression.Value>
														</ns0:CodePrimitiveExpression>
													</ns0:CodeBinaryOperatorExpression.Right>
													<ns0:CodeBinaryOperatorExpression.Left>
														<ns0:CodeBinaryOperatorExpression Operator="Add">
															<ns0:CodeBinaryOperatorExpression.Right>
																<ns0:CodeFieldReferenceExpression FieldName="m_AliquotTypeFromFirstTest">
																	<ns0:CodeFieldReferenceExpression.TargetObject>
																		<ns0:CodeThisReferenceExpression />
																	</ns0:CodeFieldReferenceExpression.TargetObject>
																</ns0:CodeFieldReferenceExpression>
															</ns0:CodeBinaryOperatorExpression.Right>
															<ns0:CodeBinaryOperatorExpression.Left>
																<ns0:CodePrimitiveExpression>
																	<ns0:CodePrimitiveExpression.Value>
																		<ns1:String xmlns:ns1="clr-namespace:System;Assembly=mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">A test for a </ns1:String>
																	</ns0:CodePrimitiveExpression.Value>
																</ns0:CodePrimitiveExpression>
															</ns0:CodeBinaryOperatorExpression.Left>
														</ns0:CodeBinaryOperatorExpression>
													</ns0:CodeBinaryOperatorExpression.Left>
												</ns0:CodeBinaryOperatorExpression>
											</ns0:CodeBinaryOperatorExpression.Left>
										</ns0:CodeBinaryOperatorExpression>
										<ns0:CodePrimitiveExpression>
											<ns0:CodePrimitiveExpression.Value>
												<ns1:Boolean xmlns:ns1="clr-namespace:System;Assembly=mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">true</ns1:Boolean>
											</ns0:CodePrimitiveExpression.Value>
										</ns0:CodePrimitiveExpression>
									</ns0:CodeMethodInvokeExpression.Parameters>
									<ns0:CodeMethodInvokeExpression.Method>
										<ns0:CodeMethodReferenceExpression MethodName="AddToStatusList">
											<ns0:CodeMethodReferenceExpression.TargetObject>
												<ns0:CodeThisReferenceExpression />
											</ns0:CodeMethodReferenceExpression.TargetObject>
										</ns0:CodeMethodReferenceExpression>
									</ns0:CodeMethodInvokeExpression.Method>
								</ns0:CodeMethodInvokeExpression>
							</ns0:CodeExpressionStatement.Expression>
						</ns0:CodeExpressionStatement>
					</RuleStatementAction.CodeDomStatement>
				</RuleStatementAction>
				<RuleHaltAction />
			</Rule.ThenActions>
			<Rule.Condition>
				<RuleExpressionCondition Name="{p1:Null}">
					<RuleExpressionCondition.Expression>
						<ns0:CodeMethodInvokeExpression xmlns:ns0="clr-namespace:System.CodeDom;Assembly=System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
							<ns0:CodeMethodInvokeExpression.Method>
								<ns0:CodeMethodReferenceExpression MethodName="NewTestsConflictWithEachOther">
									<ns0:CodeMethodReferenceExpression.TargetObject>
										<ns0:CodeThisReferenceExpression />
									</ns0:CodeMethodReferenceExpression.TargetObject>
								</ns0:CodeMethodReferenceExpression>
							</ns0:CodeMethodInvokeExpression.Method>
						</ns0:CodeMethodInvokeExpression>
					</RuleExpressionCondition.Expression>
				</RuleExpressionCondition>
			</Rule.Condition>
		</Rule>
		<Rule ReevaluationBehavior="Always" Priority="800" Description="{p1:Null}" Active="True" Name="NewTestsConflictAliquotType">
			<Rule.ThenActions>
				<RuleStatementAction>
					<RuleStatementAction.CodeDomStatement>
						<ns0:CodeExpressionStatement LinePragma="{p1:Null}" xmlns:ns0="clr-namespace:System.CodeDom;Assembly=System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
							<ns0:CodeExpressionStatement.Expression>
								<ns0:CodeMethodInvokeExpression>
									<ns0:CodeMethodInvokeExpression.Parameters>
										<ns0:CodeBinaryOperatorExpression Operator="Add">
											<ns0:CodeBinaryOperatorExpression.Right>
												<ns0:CodeFieldReferenceExpression FieldName="m_AliquotType">
													<ns0:CodeFieldReferenceExpression.TargetObject>
														<ns0:CodeThisReferenceExpression />
													</ns0:CodeFieldReferenceExpression.TargetObject>
												</ns0:CodeFieldReferenceExpression>
											</ns0:CodeBinaryOperatorExpression.Right>
											<ns0:CodeBinaryOperatorExpression.Left>
												<ns0:CodeBinaryOperatorExpression Operator="Add">
													<ns0:CodeBinaryOperatorExpression.Right>
														<ns0:CodePrimitiveExpression>
															<ns0:CodePrimitiveExpression.Value>
																<ns1:String xmlns:ns1="clr-namespace:System;Assembly=mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"> cannot be ordered when the  aliquot type is a </ns1:String>
															</ns0:CodePrimitiveExpression.Value>
														</ns0:CodePrimitiveExpression>
													</ns0:CodeBinaryOperatorExpression.Right>
													<ns0:CodeBinaryOperatorExpression.Left>
														<ns0:CodeBinaryOperatorExpression Operator="Add">
															<ns0:CodeBinaryOperatorExpression.Right>
																<ns0:CodeFieldReferenceExpression FieldName="m_AliquotTypeFromFirstTest">
																	<ns0:CodeFieldReferenceExpression.TargetObject>
																		<ns0:CodeThisReferenceExpression />
																	</ns0:CodeFieldReferenceExpression.TargetObject>
																</ns0:CodeFieldReferenceExpression>
															</ns0:CodeBinaryOperatorExpression.Right>
															<ns0:CodeBinaryOperatorExpression.Left>
																<ns0:CodePrimitiveExpression>
																	<ns0:CodePrimitiveExpression.Value>
																		<ns1:String xmlns:ns1="clr-namespace:System;Assembly=mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">A test for a </ns1:String>
																	</ns0:CodePrimitiveExpression.Value>
																</ns0:CodePrimitiveExpression>
															</ns0:CodeBinaryOperatorExpression.Left>
														</ns0:CodeBinaryOperatorExpression>
													</ns0:CodeBinaryOperatorExpression.Left>
												</ns0:CodeBinaryOperatorExpression>
											</ns0:CodeBinaryOperatorExpression.Left>
										</ns0:CodeBinaryOperatorExpression>
										<ns0:CodePrimitiveExpression>
											<ns0:CodePrimitiveExpression.Value>
												<ns1:Boolean xmlns:ns1="clr-namespace:System;Assembly=mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">true</ns1:Boolean>
											</ns0:CodePrimitiveExpression.Value>
										</ns0:CodePrimitiveExpression>
									</ns0:CodeMethodInvokeExpression.Parameters>
									<ns0:CodeMethodInvokeExpression.Method>
										<ns0:CodeMethodReferenceExpression MethodName="AddToStatusList">
											<ns0:CodeMethodReferenceExpression.TargetObject>
												<ns0:CodeThisReferenceExpression />
											</ns0:CodeMethodReferenceExpression.TargetObject>
										</ns0:CodeMethodReferenceExpression>
									</ns0:CodeMethodInvokeExpression.Method>
								</ns0:CodeMethodInvokeExpression>
							</ns0:CodeExpressionStatement.Expression>
						</ns0:CodeExpressionStatement>
					</RuleStatementAction.CodeDomStatement>
				</RuleStatementAction>
				<RuleHaltAction />
			</Rule.ThenActions>
			<Rule.Condition>
				<RuleExpressionCondition Name="{p1:Null}">
					<RuleExpressionCondition.Expression>
						<ns0:CodeMethodInvokeExpression xmlns:ns0="clr-namespace:System.CodeDom;Assembly=System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
							<ns0:CodeMethodInvokeExpression.Method>
								<ns0:CodeMethodReferenceExpression MethodName="NewTestsConflictAliquotType">
									<ns0:CodeMethodReferenceExpression.TargetObject>
										<ns0:CodeThisReferenceExpression />
									</ns0:CodeMethodReferenceExpression.TargetObject>
								</ns0:CodeMethodReferenceExpression>
							</ns0:CodeMethodInvokeExpression.Method>
						</ns0:CodeMethodInvokeExpression>
					</RuleExpressionCondition.Expression>
				</RuleExpressionCondition>
			</Rule.Condition>
		</Rule>
	</RuleSet.Rules>
</RuleSet>